{"version":3,"sources":["components/CurrentWeather/ButtonGroup/styles.ts","components/CurrentWeather/ButtonGroup/index.tsx","components/CurrentWeather/styles.ts","components/CurrentWeather/index.tsx"],"names":["Wrapper","styled","div","theme","spacing","Button","button","typography","h3","palette","common","white","props","active","transitions","duration","shorter","easing","easeInOut","ButtonGroup","activeCity","setActiveCity","handleClick","e","preventDefault","name","target","cities","map","city","index","onClick","Card","Coordinates","breakpoints","phone","Coordinate","span","body","sm","Title","h1","StyledDate","Temperature","Property","CurrentWeather","useContext","AppContext","currentWeather","dispatch","useState","errorMessage","setErrorMessage","useEffect","mounted","retrieveCurrentWeather","then","data","type","CurrentWeatherTypes","Add","payload","catch","err","console","warn","lat","lon","date","temp","weather","app_temp","rh","wind_cdir","wind_spd","clouds","precip","vis","aqi","src","icon","alt","description","Math","round","checkAirQuality","Spinner"],"mappings":"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","file":"static/js/4.600f336e.chunk.js","sourcesContent":["import styled from \"styled-components\";\nimport { theme } from \"globalStyles\";\n\nexport const Wrapper = styled.div`\n  display: flex;\n  flex-wrap: wrap;\n  justify-content: center;\n  padding: ${theme.spacing(10)} 0 ${theme.spacing(5)};\n`;\n\nexport const Button = styled.button<{ active: boolean }>`\n  position: relative;\n  background: none;\n  border: none;\n  padding: ${theme.spacing(4)} ${theme.spacing(8)};\n  ${theme.typography.h3};\n  text-transform: uppercase;\n  color: ${theme.palette.common.white};\n  cursor: ${(props) => (props.active ? \"default\" : \"pointer\")};\n\n  &:not(:last-child) {\n    margin-right: ${theme.spacing(1)};\n  }\n\n  &:before {\n    content: \"\";\n    position: absolute;\n    bottom: ${theme.spacing(3)};\n    left: ${theme.spacing(8)};\n    width: ${(props) => (props.active ? `calc(100% - ${theme.spacing(16)})` : 0)};\n    height: 3px;\n    background-color: ${theme.palette.common.white};\n    transition: width ${theme.transitions.duration.shorter}ms ${theme.transitions.easing.easeInOut};\n  }\n\n  &:active {\n    &:before {\n      width: calc(100% - ${theme.spacing(16)});\n    }\n  }\n\n  @media (hover: hover) {\n    &:hover {\n      &:before {\n        width: calc(100% - ${theme.spacing(16)});\n      }\n    }\n  }\n`;\n","import React, { Dispatch, SetStateAction } from \"react\";\nimport cities from \"data/cities.json\";\nimport { Wrapper, Button } from \"./styles\";\n\ntype Props = {\n  activeCity: City;\n  setActiveCity: Dispatch<SetStateAction<City>>;\n};\n\n/**\n * Group of buttons displaying list of selectable cities for displaying related weather data.\n * @param {City} activeCity - Selected / active city.\n * @param {function} setActiveCity - Hook function for updating active city.\n * @returns List of selectable cities.\n */\nconst ButtonGroup: React.FC<Props> = ({ activeCity, setActiveCity }: Props) => {\n  const handleClick = (e: React.SyntheticEvent<HTMLButtonElement>): void => {\n    e.preventDefault();\n\n    const { name } = e?.target as HTMLButtonElement;\n\n    setActiveCity(name as City);\n  };\n\n  return (\n    <Wrapper>\n      {cities?.map((city, index) => (\n        <Button key={`${city}-${index}`} name={city} onClick={handleClick} active={city === activeCity}>\n          {city}\n        </Button>\n      ))}\n    </Wrapper>\n  );\n};\n\nexport default ButtonGroup;\n","import styled from \"styled-components\";\nimport Card from \"components/Card\";\nimport { theme } from \"globalStyles\";\n\nexport const Wrapper = styled.div`\n  align-self: flex-start;\n  width: 100%;\n\n  ${Card} {\n    & > * {\n      &:not(:last-child) {\n        margin-bottom: ${theme.spacing(1)};\n      }\n    }\n  }\n`;\n\nexport const Coordinates = styled.div`\n  display: flex;\n\n  ${theme.breakpoints.phone} {\n    flex-direction: column;\n    text-align: center;\n  }\n`;\n\nexport const Coordinate = styled.span`\n  ${theme.typography.body.sm};\n\n  &:first-child {\n    margin-right: ${theme.spacing(2)};\n  }\n\n  ${theme.breakpoints.phone} {\n    &:first-child {\n      margin-right: 0;\n    }\n  }\n`;\n\nexport const Title = styled.h1`\n  color: ${theme.palette.common.white};\n  text-align: center;\n`;\n\nexport const StyledDate = styled.span`\n  text-transform: uppercase;\n  ${theme.typography.body.sm};\n`;\n\nexport const Temperature = styled.span`\n  ${theme.typography.h1};\n  font-size: 3rem;\n`;\n\nexport const Property = styled.span`\n  text-align: center;\n`;\n","import React, { useState, useEffect, useContext } from \"react\";\nimport { retrieveCurrentWeather } from \"api\";\nimport { AppContext } from \"context\";\nimport CurrentWeatherTypes from \"context/currentWeather/types\";\nimport Spinner from \"components/Spinner\";\nimport Card from \"components/Card\";\nimport ButtonGroup from \"./ButtonGroup\";\nimport { Wrapper, Title, Coordinates, Coordinate, StyledDate, Temperature, Property } from \"./styles\";\n\n/**\n * Displays current weather data on selected location.\n * @returns Current Weather page with selectable cities & related weather data.\n */\nconst CurrentWeather: React.FC = () => {\n  // Stored weather data\n  const { currentWeather, dispatch } = useContext(AppContext);\n\n  // City to display the weather data for\n  const [activeCity, setActiveCity] = useState<City>(\"City of London\");\n\n  // Error message to handle server errors\n  const [errorMessage, setErrorMessage] = useState<string>(\"\");\n\n  // Retrieve weather data on selected city if none exists\n  useEffect(() => {\n    let mounted = true;\n\n    if (!currentWeather?.[activeCity]) {\n      retrieveCurrentWeather(activeCity)\n        .then((data) => {\n          if (mounted) {\n            dispatch({\n              type: CurrentWeatherTypes.Add,\n              payload: { [activeCity]: data } as LocationsCurrentWeather,\n            });\n          }\n        })\n        .catch((err) => {\n          setErrorMessage(\"Aw snap, something went wrong. Please try again later.\");\n          console.warn(err);\n        });\n    }\n\n    return () => {\n      mounted = false;\n    };\n  }, [activeCity]);\n\n  /**\n   * Returns air quality based on US - EPA standard 0 - +500.\n   * @param aqi - Air quality expressed as number 0 - 500.\n   * @returns Air quality value.\n   */\n  const checkAirQuality = (aqi: number): string => {\n    if (aqi < 50) {\n      return \"Good\";\n    }\n    if (aqi < 100) {\n      return \"Moderate\";\n    }\n    if (aqi < 150) {\n      return \"Unhealthy for Sensitive Groups\";\n    }\n    if (aqi < 200) {\n      return \"Unhealthy\";\n    }\n    if (aqi < 300) {\n      return \"Very Unhealthy\";\n    }\n    return \"Hazardous\";\n  };\n\n  const { lat, lon, date, temp, weather, app_temp, rh, wind_cdir, wind_spd, clouds, precip, vis, aqi } =\n    currentWeather?.[activeCity] || {};\n\n  return (\n    <Wrapper>\n      <Title>Choose a city to see what's the weather like today:</Title>\n\n      <ButtonGroup activeCity={activeCity} setActiveCity={setActiveCity} />\n\n      <Card>\n        {errorMessage ? (\n          <p>{errorMessage}</p>\n        ) : (\n          <>\n            {currentWeather?.[activeCity] ? (\n              <>\n                <Coordinates>\n                  <Coordinate>Lat: {lat}°</Coordinate>\n                  <Coordinate>Lon: {lon}°</Coordinate>\n                </Coordinates>\n\n                <StyledDate>Today, {date}</StyledDate>\n\n                <Temperature>{temp}°</Temperature>\n                <img\n                  src={`https://www.weatherbit.io/static/img/icons/${weather?.icon}.png`}\n                  alt={weather?.description}\n                />\n\n                <Property>Feels like: {app_temp}°</Property>\n                <Property>Humidity: {rh && Math.round(rh)}%</Property>\n                <Property>\n                  Wind: {wind_cdir} {wind_spd} m/s\n                </Property>\n                <Property>Clouds: {clouds}% </Property>\n                <Property>Rain: {precip} mm/Hr </Property>\n                <Property>Visibility: {vis} km </Property>\n                <Property>\n                  Air Quality: {aqi} ({aqi && checkAirQuality(aqi)})\n                </Property>\n              </>\n            ) : (\n              <Spinner />\n            )}\n          </>\n        )}\n      </Card>\n    </Wrapper>\n  );\n};\n\nexport default CurrentWeather;\n"],"sourceRoot":""}